# Default values for nginx-reverse-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: docker.io
  repository: bitnami/nginx
  tag: 1.16.1-debian-10-r0
  pullPolicy: IfNotPresent

securityContext:
  runAsNonRoot: true
  runAsUser: 1000

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  timeoutSeconds: 5
  failureThreshold: 6
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  timeoutSeconds: 3
  periodSeconds: 5
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 80
  httpsPort: 443
  nodePorts:
    http: ""
    https: ""
  externalTrafficPolicy: Cluster

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:certificate
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/inbound-cidrs: 111.111.111.111/32, <natPublicIp>/32
  hosts:
    - host: demo-host.com
      paths: 
        - /*

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/nginx-exporter
    tag: 0.5.0-debian-10-r0
    pullPolicy: IfNotPresent
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
  service:
    port: 9113
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
  resources:
    limits: {}
    requests: {}
  serviceMonitor:
    enabled: false
